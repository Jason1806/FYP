"""
Simple GUI Module using tkinter
Provides a user-friendly interface for the penetration testing tool
"""

try:
    import tkinter as tk
    from tkinter import ttk, filedialog, messagebox, scrolledtext
    import threading
    import queue
    import sys
    import os
    
    # Add project root to path
    sys.path.insert(0, os.path.dirname(os.path.dirname(os.path.dirname(os.path.abspath(__file__)))))
    
    from pentestool.core.scanner import NetworkScanner
    from pentestool.core.webapp import WebAppScanner
    from pentestool.ai.analyzer import VulnerabilityAnalyzer
    from pentestool.reports.generator import ReportGenerator
    from pentestool.utils.config import Config
    
    class PenTestToolGUI:
        """Main GUI application class"""
        
        def __init__(self, root):
            self.root = root
            self.root.title("AI-Powered Penetration Testing Tool")
            self.root.geometry("1000x700")
            
            # Initialize components
            self.config = Config()
            self.scan_queue = queue.Queue()
            self.is_scanning = False
            
            # Create GUI elements
            self.create_widgets()
            
            # Configure styles
            self.configure_styles()
        
        def create_widgets(self):
            """Create and arrange GUI widgets"""
            # Main notebook for tabs
            self.notebook = ttk.Notebook(self.root)
            self.notebook.pack(fill='both', expand=True, padx=10, pady=10)
            
            # Scan tab
            self.create_scan_tab()
            
            # Results tab
            self.create_results_tab()
            
            # Settings tab
            self.create_settings_tab()
            
            # About tab
            self.create_about_tab()
        
        def create_scan_tab(self):
            """Create the main scanning tab"""
            scan_frame = ttk.Frame(self.notebook)
            self.notebook.add(scan_frame, text="Scan")
            
            # Target input
            target_frame = ttk.LabelFrame(scan_frame, text="Target Configuration", padding=10)
            target_frame.pack(fill='x', padx=10, pady=5)
            
            ttk.Label(target_frame, text="Target (IP/Domain):").grid(row=0, column=0, sticky='w')
            self.target_var = tk.StringVar()
            target_entry = ttk.Entry(target_frame, textvariable=self.target_var, width=40)
            target_entry.grid(row=0, column=1, padx=(10, 0), sticky='ew')
            
            ttk.Label(target_frame, text="Port Range:").grid(row=1, column=0, sticky='w', pady=(5, 0))
            self.ports_var = tk.StringVar(value="1-1000")
            ports_entry = ttk.Entry(target_frame, textvariable=self.ports_var, width=20)
            ports_entry.grid(row=1, column=1, padx=(10, 0), sticky='w', pady=(5, 0))
            
            target_frame.columnconfigure(1, weight=1)
            
            # Scan options
            options_frame = ttk.LabelFrame(scan_frame, text="Scan Options", padding=10)
            options_frame.pack(fill='x', padx=10, pady=5)
            
            self.network_scan_var = tk.BooleanVar(value=True)
            ttk.Checkbutton(options_frame, text="Network Scan", variable=self.network_scan_var).pack(anchor='w')
            
            self.webapp_scan_var = tk.BooleanVar(value=True)
            ttk.Checkbutton(options_frame, text="Web Application Scan", variable=self.webapp_scan_var).pack(anchor='w')
            
            self.ai_analysis_var = tk.BooleanVar(value=True)
            ttk.Checkbutton(options_frame, text="AI-Powered Analysis", variable=self.ai_analysis_var).pack(anchor='w')
            
            # Control buttons
            control_frame = ttk.Frame(scan_frame)
            control_frame.pack(fill='x', padx=10, pady=10)
            
            self.scan_button = ttk.Button(control_frame, text="Start Scan", command=self.start_scan, style='Accent.TButton')
            self.scan_button.pack(side='left', padx=(0, 10))
            
            self.stop_button = ttk.Button(control_frame, text="Stop Scan", command=self.stop_scan, state='disabled')
            self.stop_button.pack(side='left', padx=(0, 10))
            
            ttk.Button(control_frame, text="Clear Log", command=self.clear_log).pack(side='left')
            
            # Progress bar
            self.progress = ttk.Progressbar(control_frame, mode='indeterminate')
            self.progress.pack(side='right', padx=(10, 0))
            
            # Log output
            log_frame = ttk.LabelFrame(scan_frame, text="Scan Log", padding=5)
            log_frame.pack(fill='both', expand=True, padx=10, pady=5)
            
            self.log_text = scrolledtext.ScrolledText(log_frame, height=15, state='disabled')
            self.log_text.pack(fill='both', expand=True)
        
        def create_results_tab(self):
            """Create the results display tab"""
            results_frame = ttk.Frame(self.notebook)
            self.notebook.add(results_frame, text="Results")
            
            # Results toolbar
            toolbar_frame = ttk.Frame(results_frame)
            toolbar_frame.pack(fill='x', padx=10, pady=5)
            
            ttk.Button(toolbar_frame, text="Generate HTML Report", command=self.generate_html_report).pack(side='left', padx=(0, 5))
            ttk.Button(toolbar_frame, text="Generate JSON Report", command=self.generate_json_report).pack(side='left', padx=(0, 5))
            ttk.Button(toolbar_frame, text="Clear Results", command=self.clear_results).pack(side='left')
            
            # Results display
            self.results_text = scrolledtext.ScrolledText(results_frame, state='disabled')
            self.results_text.pack(fill='both', expand=True, padx=10, pady=5)
            
            # Store scan results
            self.scan_results = {}
        
        def create_settings_tab(self):
            """Create the settings configuration tab"""
            settings_frame = ttk.Frame(self.notebook)
            self.notebook.add(settings_frame, text="Settings")
            
            # Scan Settings
            scan_settings_frame = ttk.LabelFrame(settings_frame, text="Scan Settings", padding=10)
            scan_settings_frame.pack(fill='x', padx=10, pady=5)
            
            ttk.Label(scan_settings_frame, text="Default Port Range:").grid(row=0, column=0, sticky='w')
            self.default_ports_var = tk.StringVar(value=self.config.get('scan_settings', 'default_ports', '1-1000'))
            ttk.Entry(scan_settings_frame, textvariable=self.default_ports_var).grid(row=0, column=1, padx=(10, 0), sticky='ew')
            
            ttk.Label(scan_settings_frame, text="Timeout (seconds):").grid(row=1, column=0, sticky='w', pady=(5, 0))
            self.timeout_var = tk.StringVar(value=str(self.config.get('scan_settings', 'timeout', 10)))
            ttk.Entry(scan_settings_frame, textvariable=self.timeout_var).grid(row=1, column=1, padx=(10, 0), sticky='ew', pady=(5, 0))
            
            scan_settings_frame.columnconfigure(1, weight=1)
            
            # Report Settings
            report_settings_frame = ttk.LabelFrame(settings_frame, text="Report Settings", padding=10)
            report_settings_frame.pack(fill='x', padx=10, pady=5)
            
            self.include_charts_var = tk.BooleanVar(value=self.config.get('report_settings', 'include_charts', True))
            ttk.Checkbutton(report_settings_frame, text="Include Charts in Reports", variable=self.include_charts_var).pack(anchor='w')
            
            self.simplified_explanations_var = tk.BooleanVar(value=self.config.get('report_settings', 'simplified_explanations', True))
            ttk.Checkbutton(report_settings_frame, text="Include Simplified Explanations", variable=self.simplified_explanations_var).pack(anchor='w')
            
            # Save settings button
            ttk.Button(settings_frame, text="Save Settings", command=self.save_settings).pack(pady=10)
        
        def create_about_tab(self):
            """Create the about/help tab"""
            about_frame = ttk.Frame(self.notebook)
            self.notebook.add(about_frame, text="About")
            
            about_text = """
AI-Powered Penetration Testing Tool
Version 1.0.0

This tool provides comprehensive security assessment capabilities for web applications 
and network infrastructure with AI-powered vulnerability analysis.

Features:
• Network port scanning and service detection
• Web application vulnerability testing (SQL injection, XSS, etc.)
• AI-powered vulnerability analysis and prioritization
• Automated report generation with simplified explanations
• User-friendly graphical interface

Usage:
1. Enter target IP address or domain name
2. Configure scan options as needed
3. Click "Start Scan" to begin assessment
4. Review results in the Results tab
5. Generate reports for stakeholders

For support or questions, please refer to the documentation.

Developed for FYP Project
            """
            
            about_label = ttk.Label(about_frame, text=about_text, justify='left', padding=20)
            about_label.pack(fill='both', expand=True)
        
        def configure_styles(self):
            """Configure ttk styles"""
            style = ttk.Style()
            style.theme_use('clam')
            
            # Configure accent button style
            style.configure('Accent.TButton', foreground='white', background='#007acc')
            style.map('Accent.TButton', background=[('active', '#005999')])
        
        def log_message(self, message: str):
            """Add message to log"""
            self.log_text.config(state='normal')
            self.log_text.insert('end', f"{message}\n")
            self.log_text.see('end')
            self.log_text.config(state='disabled')
            self.root.update()
        
        def clear_log(self):
            """Clear the log display"""
            self.log_text.config(state='normal')
            self.log_text.delete(1.0, 'end')
            self.log_text.config(state='disabled')
        
        def start_scan(self):
            """Start the scanning process"""
            target = self.target_var.get().strip()
            if not target:
                messagebox.showerror("Error", "Please enter a target IP address or domain name.")
                return
            
            # Update GUI state
            self.is_scanning = True
            self.scan_button.config(state='disabled')
            self.stop_button.config(state='normal')
            self.progress.start()
            
            # Clear previous results
            self.clear_results()
            self.clear_log()
            
            # Start scan in separate thread
            scan_thread = threading.Thread(target=self.run_scan, args=(target,))
            scan_thread.daemon = True
            scan_thread.start()
        
        def run_scan(self, target: str):
            """Run the actual scan (in separate thread)"""
            try:
                self.log_message(f"Starting scan of target: {target}")
                
                # Initialize scanners
                network_results = {}
                webapp_results = {}
                ai_analysis = {}
                
                # Network scan
                if self.network_scan_var.get():
                    self.log_message("Performing network scan...")
                    network_scanner = NetworkScanner()
                    network_results = network_scanner.scan_target(target, self.ports_var.get())
                    self.log_message(f"Network scan completed. Found {len(network_results.get('open_ports', []))} open ports.")
                
                # Web application scan
                if self.webapp_scan_var.get():
                    self.log_message("Performing web application scan...")
                    webapp_scanner = WebAppScanner()
                    http_ports = [port for port in network_results.get('open_ports', []) if port in [80, 443, 8080, 8443]]
                    if http_ports:
                        webapp_results = webapp_scanner.scan_webapp(target, http_ports)
                        self.log_message("Web application scan completed.")
                    else:
                        self.log_message("No web services found to scan.")
                
                # AI Analysis
                if self.ai_analysis_var.get():
                    self.log_message("Performing AI-powered vulnerability analysis...")
                    analyzer = VulnerabilityAnalyzer()
                    ai_analysis = analyzer.analyze_vulnerabilities(network_results, webapp_results)
                    self.log_message("AI analysis completed.")
                
                # Store results
                self.scan_results = {
                    'target': target,
                    'network_results': network_results,
                    'webapp_results': webapp_results,
                    'ai_analysis': ai_analysis
                }
                
                # Display results
                self.root.after(0, self.display_results)
                self.log_message("Scan completed successfully!")
                
            except Exception as e:
                self.log_message(f"Error during scan: {str(e)}")
            finally:
                # Reset GUI state
                self.root.after(0, self.scan_finished)
        
        def scan_finished(self):
            """Reset GUI state after scan completion"""
            self.is_scanning = False
            self.scan_button.config(state='normal')
            self.stop_button.config(state='disabled')
            self.progress.stop()
        
        def stop_scan(self):
            """Stop the current scan"""
            self.is_scanning = False
            self.log_message("Scan stopped by user.")
            self.scan_finished()
        
        def display_results(self):
            """Display scan results in the results tab"""
            if not self.scan_results:
                return
            
            self.results_text.config(state='normal')
            self.results_text.delete(1.0, 'end')
            
            # Generate summary
            report_gen = ReportGenerator()
            
            # Capture console output for GUI display
            import io
            from contextlib import redirect_stdout
            
            output_buffer = io.StringIO()
            with redirect_stdout(output_buffer):
                report_gen.print_summary(self.scan_results)
            
            summary_text = output_buffer.getvalue()
            self.results_text.insert('end', summary_text)
            
            self.results_text.config(state='disabled')
            
            # Switch to results tab
            self.notebook.select(1)
        
        def clear_results(self):
            """Clear the results display"""
            self.results_text.config(state='normal')
            self.results_text.delete(1.0, 'end')
            self.results_text.config(state='disabled')
            self.scan_results = {}
        
        def generate_html_report(self):
            """Generate HTML report"""
            if not self.scan_results:
                messagebox.showwarning("Warning", "No scan results available. Please run a scan first.")
                return
            
            filename = filedialog.asksaveasfilename(
                title="Save HTML Report",
                defaultextension=".html",
                filetypes=[("HTML files", "*.html"), ("All files", "*.*")]
            )
            
            if filename:
                try:
                    report_gen = ReportGenerator()
                    report_gen.generate_html_report(self.scan_results, filename)
                    messagebox.showinfo("Success", f"HTML report saved to: {filename}")
                except Exception as e:
                    messagebox.showerror("Error", f"Failed to generate HTML report: {str(e)}")
        
        def generate_json_report(self):
            """Generate JSON report"""
            if not self.scan_results:
                messagebox.showwarning("Warning", "No scan results available. Please run a scan first.")
                return
            
            filename = filedialog.asksaveasfilename(
                title="Save JSON Report",
                defaultextension=".json",
                filetypes=[("JSON files", "*.json"), ("All files", "*.*")]
            )
            
            if filename:
                try:
                    report_gen = ReportGenerator()
                    report_gen.generate_json_report(self.scan_results, filename)
                    messagebox.showinfo("Success", f"JSON report saved to: {filename}")
                except Exception as e:
                    messagebox.showerror("Error", f"Failed to generate JSON report: {str(e)}")
        
        def save_settings(self):
            """Save configuration settings"""
            try:
                # Update configuration
                self.config.set('scan_settings', 'default_ports', self.default_ports_var.get())
                self.config.set('scan_settings', 'timeout', int(self.timeout_var.get()))
                self.config.set('report_settings', 'include_charts', self.include_charts_var.get())
                self.config.set('report_settings', 'simplified_explanations', self.simplified_explanations_var.get())
                
                messagebox.showinfo("Success", "Settings saved successfully!")
            except Exception as e:
                messagebox.showerror("Error", f"Failed to save settings: {str(e)}")

    def launch_gui():
        """Launch the GUI application"""
        try:
            root = tk.Tk()
            app = PenTestToolGUI(root)
            root.mainloop()
        except ImportError as e:
            print(f"GUI not available: {e}")
            print("Please install tkinter or use the command line interface.")
        except Exception as e:
            print(f"Error launching GUI: {e}")

except ImportError:
    # Fallback if tkinter is not available
    def launch_gui():
        print("GUI not available: tkinter not installed.")
        print("Please use the command line interface instead.")
        print("Example: python -m pentestool.main scan -t example.com")
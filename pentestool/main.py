#!/usr/bin/env python3
"""
Main entry point for the AI-Powered Penetration Testing Tool
"""

import click
import pyfiglet
from rich.console import Console
from rich.panel import Panel
from rich.table import Table
import sys
import os

# Add the project root to the path
sys.path.insert(0, os.path.dirname(os.path.dirname(os.path.abspath(__file__))))

from pentestool.core.scanner import NetworkScanner
from pentestool.core.webapp import WebAppScanner
from pentestool.reports.generator import ReportGenerator
from pentestool.utils.config import Config

console = Console()

# Optional AI imports - fail gracefully
try:
    from pentestool.ai.analyzer import VulnerabilityAnalyzer
    AI_AVAILABLE = True
except ImportError as e:
    console.print(f"[yellow]Warning: AI analysis not available: {e}[/yellow]")
    VulnerabilityAnalyzer = None
    AI_AVAILABLE = False

def print_banner():
    """Print the tool banner"""
    banner = pyfiglet.figlet_format("PenTestool", font="slant")
    console.print(Panel(banner, title="AI-Powered Penetration Testing Tool", border_style="blue"))
    console.print("[bold green]Version 1.0.0 - FYP Project[/bold green]\n")

@click.group()
@click.pass_context
def cli(ctx):
    """AI-Powered Penetration Testing Tool for Web Applications and Infrastructure"""
    if ctx.invoked_subcommand is None:
        print_banner()

@cli.command()
@click.option('--target', '-t', required=True, help='Target IP address or domain')
@click.option('--ports', '-p', default='1-1000', help='Port range to scan (default: 1-1000)')
@click.option('--output', '-o', help='Output file for results')
@click.option('--ai-analysis', is_flag=True, help='Enable AI-powered vulnerability analysis')
def scan(target, ports, output, ai_analysis):
    """Perform network and web application scanning"""
    console.print(f"[bold blue]Starting scan of target: {target}[/bold blue]")
    
    # Initialize components
    network_scanner = NetworkScanner()
    webapp_scanner = WebAppScanner()
    
    # Perform network scan
    console.print("[yellow]Performing network scan...[/yellow]")
    network_results = network_scanner.scan_target(target, ports)
    
    # Perform web application scan if HTTP ports are open
    webapp_results = {}
    http_ports = [port for port in network_results.get('open_ports', []) if port in [80, 443, 8080, 8443]]
    if http_ports:
        console.print("[yellow]Performing web application scan...[/yellow]")
        webapp_results = webapp_scanner.scan_webapp(target, http_ports)
    
    # AI Analysis
    if ai_analysis and AI_AVAILABLE:
        console.print("[yellow]Performing AI-powered vulnerability analysis...[/yellow]")
        analyzer = VulnerabilityAnalyzer()
        ai_results = analyzer.analyze_vulnerabilities(network_results, webapp_results)
    elif ai_analysis and not AI_AVAILABLE:
        console.print("[red]AI analysis requested but dependencies not available[/red]")
        ai_results = {}
    else:
        ai_results = {}
    
    # Generate report
    console.print("[yellow]Generating report...[/yellow]")
    report_gen = ReportGenerator()
    report_data = {
        'target': target,
        'network_results': network_results,
        'webapp_results': webapp_results,
        'ai_analysis': ai_results
    }
    
    if output:
        report_gen.generate_html_report(report_data, output)
        console.print(f"[green]Report saved to: {output}[/green]")
    else:
        report_gen.print_summary(report_data)

@cli.command()
@click.option('--target', '-t', required=True, help='Target web application URL')
@click.option('--output', '-o', help='Output file for results')
def webapp(target, output):
    """Perform web application specific testing"""
    console.print(f"[bold blue]Starting web application scan of: {target}[/bold blue]")
    
    webapp_scanner = WebAppScanner()
    results = webapp_scanner.comprehensive_scan(target)
    
    report_gen = ReportGenerator()
    if output:
        report_gen.generate_html_report({'webapp_results': results}, output)
        console.print(f"[green]Report saved to: {output}[/green]")
    else:
        report_gen.print_webapp_summary(results)

@cli.command()
def gui():
    """Launch the graphical user interface"""
    try:
        from pentestool.gui.main_window import launch_gui
        launch_gui()
    except ImportError as e:
        console.print(f"[red]GUI dependencies not available: {e}[/red]")
        console.print("[yellow]Please install GUI dependencies or use CLI mode[/yellow]")

def main():
    """Main entry point"""
    try:
        print_banner()
        cli()
    except KeyboardInterrupt:
        console.print("\n[red]Scan interrupted by user[/red]")
        sys.exit(1)
    except Exception as e:
        console.print(f"[red]Error: {e}[/red]")
        sys.exit(1)

if __name__ == '__main__':
    main()
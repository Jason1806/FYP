"""
Report Generation Module
Handles creation of HTML and JSON reports with professional formatting
"""

import json
import html
from datetime import datetime
from typing import Dict, Any, List
import os


class ReportGenerator:
    """Generate professional security assessment reports"""
    
    def __init__(self):
        self.report_templates = {
            'html_header': """<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Penetration Testing Report</title>
    <style>
        body { font-family: Arial, sans-serif; margin: 20px; line-height: 1.6; }
        .header { background: #2c3e50; color: white; padding: 20px; text-align: center; }
        .section { margin: 20px 0; padding: 15px; border-left: 4px solid #3498db; }
        .critical { border-left-color: #e74c3c; }
        .high { border-left-color: #f39c12; }
        .medium { border-left-color: #f1c40f; }
        .low { border-left-color: #27ae60; }
        .info { border-left-color: #3498db; }
        table { width: 100%; border-collapse: collapse; margin: 10px 0; }
        th, td { padding: 8px; text-align: left; border-bottom: 1px solid #ddd; }
        th { background-color: #f2f2f2; }
        .summary-box { background: #ecf0f1; padding: 15px; margin: 10px 0; border-radius: 5px; }
        .vulnerability { margin: 10px 0; padding: 10px; border: 1px solid #bdc3c7; border-radius: 5px; }
        .risk-score { font-size: 24px; font-weight: bold; color: #e74c3c; }
    </style>
</head>
<body>""",
            'html_footer': """</body></html>"""
        }
    
    def generate_html_report(self, data: Dict[str, Any], filename: str) -> None:
        """
        Generate comprehensive HTML report
        
        Args:
            data: Scan results data
            filename: Output file path
        """
        try:
            html_content = self._build_html_report(data)
            
            with open(filename, 'w', encoding='utf-8') as f:
                f.write(html_content)
                
        except Exception as e:
            raise Exception(f"Failed to generate HTML report: {str(e)}")
    
    def generate_json_report(self, data: Dict[str, Any], filename: str) -> None:
        """
        Generate JSON report with structured data
        
        Args:
            data: Scan results data
            filename: Output file path
        """
        try:
            # Create a clean JSON structure
            json_data = {
                'report_metadata': {
                    'generated_at': datetime.now().isoformat(),
                    'tool': 'AI-Powered Penetration Testing Tool',
                    'version': '1.0.0'
                },
                'scan_results': data,
                'summary': self._generate_summary_stats(data)
            }
            
            with open(filename, 'w', encoding='utf-8') as f:
                json.dump(json_data, f, indent=2, default=str)
                
        except Exception as e:
            raise Exception(f"Failed to generate JSON report: {str(e)}")
    
    def print_summary(self, data: Dict[str, Any]) -> None:
        """
        Print comprehensive summary to console
        
        Args:
            data: Scan results data
        """
        print("=" * 80)
        print("PENETRATION TESTING REPORT SUMMARY")
        print("=" * 80)
        print(f"Generated: {datetime.now().strftime('%Y-%m-%d %H:%M:%S')}")
        print()
        
        # Target information
        target = data.get('target', 'Unknown')
        print(f"Target: {target}")
        
        # Network results summary
        if 'network_results' in data:
            self._print_network_summary(data['network_results'])
        
        # Web application results summary
        if 'webapp_results' in data:
            self._print_webapp_summary_section(data['webapp_results'])
        
        # AI analysis summary
        if 'ai_analysis' in data and data['ai_analysis']:
            self._print_ai_analysis_summary(data['ai_analysis'])
        
        print("=" * 80)
    
    def print_webapp_summary(self, results: Dict[str, Any]) -> None:
        """
        Print web application specific summary
        
        Args:
            results: Web application scan results
        """
        print("=" * 60)
        print("WEB APPLICATION SCAN SUMMARY")
        print("=" * 60)
        print(f"Generated: {datetime.now().strftime('%Y-%m-%d %H:%M:%S')}")
        print()
        
        self._print_webapp_summary_section(results)
        
        print("=" * 60)
    
    def _build_html_report(self, data: Dict[str, Any]) -> str:
        """Build complete HTML report"""
        html_parts = [self.report_templates['html_header']]
        
        # Header
        target = data.get('target', 'Unknown')
        html_parts.append(f"""
        <div class="header">
            <h1>Penetration Testing Report</h1>
            <h2>Target: {html.escape(str(target))}</h2>
            <p>Generated: {datetime.now().strftime('%Y-%m-%d %H:%M:%S')}</p>
        </div>
        """)
        
        # Executive Summary
        html_parts.append(self._build_executive_summary(data))
        
        # Network Results
        if 'network_results' in data:
            html_parts.append(self._build_network_section(data['network_results']))
        
        # Web Application Results
        if 'webapp_results' in data:
            html_parts.append(self._build_webapp_section(data['webapp_results']))
        
        # AI Analysis
        if 'ai_analysis' in data and data['ai_analysis']:
            html_parts.append(self._build_ai_analysis_section(data['ai_analysis']))
        
        html_parts.append(self.report_templates['html_footer'])
        
        return ''.join(html_parts)
    
    def _build_executive_summary(self, data: Dict[str, Any]) -> str:
        """Build executive summary section"""
        stats = self._generate_summary_stats(data)
        
        return f"""
        <div class="section summary-box">
            <h2>Executive Summary</h2>
            <div class="risk-score">Overall Risk Score: {stats['risk_score']}/100</div>
            <p><strong>Total Issues Found:</strong> {stats['total_issues']}</p>
            <p><strong>Critical Issues:</strong> {stats['critical_issues']}</p>
            <p><strong>High Priority Issues:</strong> {stats['high_issues']}</p>
            <p><strong>Services Discovered:</strong> {stats['services_found']}</p>
            
            <h3>Key Findings:</h3>
            <ul>
                {''.join([f'<li>{html.escape(finding)}</li>' for finding in stats['key_findings']])}
            </ul>
            
            <h3>Immediate Actions Required:</h3>
            <ul>
                {''.join([f'<li>{html.escape(action)}</li>' for action in stats['immediate_actions']])}
            </ul>
        </div>
        """
    
    def _build_network_section(self, network_data: Dict[str, Any]) -> str:
        """Build network scan results section"""
        open_ports = network_data.get('open_ports', [])
        services = network_data.get('services', {})
        
        services_table = ""
        if services:
            services_table = "<table><tr><th>Port</th><th>Service</th><th>Version</th></tr>"
            for port, service_info in services.items():
                service_name = service_info.get('name', 'Unknown')
                version = service_info.get('version', 'Unknown')
                services_table += f"<tr><td>{html.escape(str(port))}</td><td>{html.escape(service_name)}</td><td>{html.escape(version)}</td></tr>"
            services_table += "</table>"
        
        return f"""
        <div class="section">
            <h2>Network Scan Results</h2>
            <p><strong>Target:</strong> {html.escape(str(network_data.get('target', 'Unknown')))}</p>
            <p><strong>Scan Time:</strong> {html.escape(str(network_data.get('scan_time', 'Unknown')))}</p>
            <p><strong>Open Ports:</strong> {', '.join(map(str, open_ports)) if open_ports else 'None detected'}</p>
            
            {f'<h3>Discovered Services</h3>{services_table}' if services else '<p>No detailed service information available.</p>'}
        </div>
        """
    
    def _build_webapp_section(self, webapp_data: Dict[str, Any]) -> str:
        """Build web application scan results section"""
        vulnerabilities = webapp_data.get('vulnerabilities', [])
        
        vuln_content = ""
        if vulnerabilities:
            vuln_content = "<h3>Vulnerabilities Detected</h3>"
            for vuln in vulnerabilities:
                severity = vuln.get('severity', 'info').lower()
                vuln_content += f"""
                <div class="vulnerability {severity}">
                    <h4>{html.escape(vuln.get('title', 'Unknown Vulnerability'))}</h4>
                    <p><strong>Severity:</strong> {html.escape(vuln.get('severity', 'Unknown')).upper()}</p>
                    <p><strong>Description:</strong> {html.escape(vuln.get('description', 'No description available'))}</p>
                    <p><strong>Impact:</strong> {html.escape(vuln.get('impact', 'Impact not specified'))}</p>
                    <p><strong>Recommendation:</strong> {html.escape(vuln.get('recommendation', 'No recommendation available'))}</p>
                </div>
                """
        
        return f"""
        <div class="section">
            <h2>Web Application Scan Results</h2>
            <p><strong>Target URL:</strong> {html.escape(str(webapp_data.get('target_url', 'Unknown')))}</p>
            <p><strong>Vulnerabilities Found:</strong> {len(vulnerabilities)}</p>
            
            {vuln_content if vulnerabilities else '<p>No vulnerabilities detected in web application scan.</p>'}
        </div>
        """
    
    def _build_ai_analysis_section(self, ai_data: Dict[str, Any]) -> str:
        """Build AI analysis section"""
        return f"""
        <div class="section">
            <h2>AI-Powered Vulnerability Analysis</h2>
            <p><strong>Analysis Confidence:</strong> {ai_data.get('confidence', 'Unknown')}%</p>
            <p><strong>Risk Assessment:</strong> {html.escape(str(ai_data.get('risk_assessment', 'Not available')))}</p>
            <p><strong>Recommendations:</strong> {html.escape(str(ai_data.get('recommendations', 'No AI recommendations available')))}</p>
        </div>
        """
    
    def _generate_summary_stats(self, data: Dict[str, Any]) -> Dict[str, Any]:
        """Generate summary statistics from scan data"""
        stats = {
            'total_issues': 0,
            'critical_issues': 0,
            'high_issues': 0,
            'services_found': 0,
            'risk_score': 0,
            'key_findings': [],
            'immediate_actions': []
        }
        
        # Count network-related findings
        if 'network_results' in data:
            network_data = data['network_results']
            open_ports = network_data.get('open_ports', [])
            services = network_data.get('services', {})
            
            stats['services_found'] = len(services)
            
            if open_ports:
                stats['key_findings'].append(f"Found {len(open_ports)} open ports")
                if len(open_ports) > 10:
                    stats['high_issues'] += 1
                    stats['immediate_actions'].append("Review and secure unnecessary open ports")
        
        # Count web application vulnerabilities
        if 'webapp_results' in data:
            webapp_data = data['webapp_results']
            vulnerabilities = webapp_data.get('vulnerabilities', [])
            
            for vuln in vulnerabilities:
                severity = vuln.get('severity', '').lower()
                stats['total_issues'] += 1
                
                if severity == 'critical':
                    stats['critical_issues'] += 1
                elif severity == 'high':
                    stats['high_issues'] += 1
            
            if vulnerabilities:
                stats['key_findings'].append(f"Identified {len(vulnerabilities)} web application vulnerabilities")
        
        # Calculate risk score
        risk_score = min(100, (stats['critical_issues'] * 25) + (stats['high_issues'] * 15) + (stats['total_issues'] * 5))
        stats['risk_score'] = risk_score
        
        # Add default actions if critical issues found
        if stats['critical_issues'] > 0:
            stats['immediate_actions'].append(f"Address {stats['critical_issues']} critical vulnerabilities immediately")
        
        if not stats['key_findings']:
            stats['key_findings'] = ["No significant security issues detected"]
        
        if not stats['immediate_actions']:
            stats['immediate_actions'] = ["Continue regular security monitoring"]
        
        return stats
    
    def _print_network_summary(self, network_data: Dict[str, Any]) -> None:
        """Print network scan summary"""
        print("NETWORK SCAN RESULTS:")
        print("-" * 40)
        print(f"Target: {network_data.get('target', 'Unknown')}")
        print(f"Resolved IP: {network_data.get('resolved_ip', 'Unknown')}")
        print(f"Ping Result: {'✓' if network_data.get('ping_result') else '✗'}")
        
        open_ports = network_data.get('open_ports', [])
        print(f"Open Ports: {', '.join(map(str, open_ports)) if open_ports else 'None'}")
        
        services = network_data.get('services', {})
        if services:
            print("\nDetected Services:")
            for port, service_info in services.items():
                service_name = service_info.get('name', 'Unknown')
                version = service_info.get('version', 'Unknown')
                print(f"  Port {port}: {service_name} ({version})")
        
        print()
    
    def _print_webapp_summary_section(self, webapp_data: Dict[str, Any]) -> None:
        """Print web application summary section"""
        print("WEB APPLICATION SCAN RESULTS:")
        print("-" * 40)
        print(f"Target URL: {webapp_data.get('target_url', 'Unknown')}")
        
        vulnerabilities = webapp_data.get('vulnerabilities', [])
        print(f"Vulnerabilities Found: {len(vulnerabilities)}")
        
        if vulnerabilities:
            print("\nVulnerability Summary:")
            severity_counts = {}
            for vuln in vulnerabilities:
                severity = vuln.get('severity', 'Unknown')
                severity_counts[severity] = severity_counts.get(severity, 0) + 1
            
            for severity, count in severity_counts.items():
                print(f"  {severity.upper()}: {count}")
            
            print("\nDetailed Findings:")
            for i, vuln in enumerate(vulnerabilities[:5], 1):  # Show first 5
                print(f"  {i}. {vuln.get('title', 'Unknown Vulnerability')} ({vuln.get('severity', 'Unknown')})")
            
            if len(vulnerabilities) > 5:
                print(f"  ... and {len(vulnerabilities) - 5} more vulnerabilities")
        
        print()
    
    def _print_ai_analysis_summary(self, ai_data: Dict[str, Any]) -> None:
        """Print AI analysis summary"""
        print("AI-POWERED ANALYSIS:")
        print("-" * 40)
        print(f"Analysis Confidence: {ai_data.get('confidence', 'Unknown')}%")
        print(f"Risk Assessment: {ai_data.get('risk_assessment', 'Not available')}")
        print(f"AI Recommendations: {ai_data.get('recommendations', 'No recommendations available')}")
        print()
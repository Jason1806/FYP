"""
Configuration Module
Handles configuration settings and user preferences
"""

import os
import json
from typing import Dict, Any

class Config:
    """Configuration management class"""
    
    def __init__(self):
        self.config_dir = os.path.join(os.path.expanduser('~'), '.pentestool')
        self.config_file = os.path.join(self.config_dir, 'config.json')
        self.default_config = {
            'scan_settings': {
                'default_ports': '1-1000',
                'timeout': 10,
                'max_threads': 50,
                'enable_ai_analysis': True,
                'scan_intensity': 'normal'  # light, normal, aggressive
            },
            'report_settings': {
                'output_format': 'html',  # html, json, both
                'include_charts': True,
                'simplified_explanations': True,
                'executive_summary': True
            },
            'network_settings': {
                'ping_timeout': 5,
                'connect_timeout': 10,
                'retry_attempts': 3
            },
            'webapp_settings': {
                'user_agent': 'Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36',
                'follow_redirects': True,
                'verify_ssl': False,
                'max_pages': 100
            },
            'ai_settings': {
                'confidence_threshold': 0.7,
                'enable_ml_predictions': True,
                'use_vulnerability_kb': True
            },
            'gui_settings': {
                'theme': 'light',  # light, dark
                'window_size': '1200x800',
                'auto_save_reports': True
            }
        }
        
        self.config = self._load_config()
    
    def _load_config(self) -> Dict[str, Any]:
        """Load configuration from file or create default"""
        if not os.path.exists(self.config_dir):
            os.makedirs(self.config_dir)
        
        if os.path.exists(self.config_file):
            try:
                with open(self.config_file, 'r') as f:
                    loaded_config = json.load(f)
                # Merge with default config to ensure all keys exist
                return self._merge_configs(self.default_config, loaded_config)
            except Exception:
                pass
        
        # Save default config
        self._save_config(self.default_config)
        return self.default_config.copy()
    
    def _merge_configs(self, default: Dict, loaded: Dict) -> Dict:
        """Merge loaded config with default config"""
        result = default.copy()
        for key, value in loaded.items():
            if key in result and isinstance(result[key], dict) and isinstance(value, dict):
                result[key] = self._merge_configs(result[key], value)
            else:
                result[key] = value
        return result
    
    def _save_config(self, config: Dict[str, Any]):
        """Save configuration to file"""
        try:
            with open(self.config_file, 'w') as f:
                json.dump(config, f, indent=2)
        except Exception as e:
            print(f"Warning: Could not save config: {e}")
    
    def get(self, section: str, key: str = None, default=None):
        """Get configuration value"""
        if key is None:
            return self.config.get(section, default)
        return self.config.get(section, {}).get(key, default)
    
    def set(self, section: str, key: str, value: Any):
        """Set configuration value"""
        if section not in self.config:
            self.config[section] = {}
        self.config[section][key] = value
        self._save_config(self.config)
    
    def get_scan_settings(self) -> Dict[str, Any]:
        """Get scan settings"""
        return self.config.get('scan_settings', {})
    
    def get_report_settings(self) -> Dict[str, Any]:
        """Get report settings"""
        return self.config.get('report_settings', {})
    
    def get_network_settings(self) -> Dict[str, Any]:
        """Get network settings"""
        return self.config.get('network_settings', {})
    
    def get_webapp_settings(self) -> Dict[str, Any]:
        """Get web app settings"""
        return self.config.get('webapp_settings', {})
    
    def get_ai_settings(self) -> Dict[str, Any]:
        """Get AI settings"""
        return self.config.get('ai_settings', {})